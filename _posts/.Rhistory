out <- replicate(10000,gsim())
gsim <- function(n = 10000) {
g <- rbinom(n, 2, 0.3)
a <- 2 + 0.5*g + rnorm(n)
y <- 4 + 0.5*a + rnorm(n)
num <- lm(y ~ g)$coef["g"]
den <- lm(a ~ g)$coef["g"]
iv <- num/den
return(c(num,den,iv))
}
out <- replicate(10000,gsim())
mod_den <- lm(a ~ g)
mod_den
mod_den$coef
summary(mod_den)$coef
summary(mod_den)$coef["g",4]
gsim <- function(n = 10000) {
g <- rbinom(n, 2, 0.3)
a <- 2 + 0.5*g + rnorm(n)
y <- 4 + 0.5*a + rnorm(n)
num <- lm(y ~ g)$coef["g"]
mod_den <- lm(a ~ g)
den <- mod_den$coef["g"]
den_p <- summary(mod_den)$coef["g",4]
iv <- num/den
return(c(num,den,den_p,iv))
}
out <- replicate(1000,gsim())
head(out)
dim(out)
out <- out %>% t
library(magrittr)
out <- out %>% t
out <- replicate(1000,gsim()) %>% t %>% as.data.frame
names(out) <- c("num","den","den_p","iv")
head(out)
hist(out$den_p)
range(out$den_p)
gsim <- function(n = 10000,a_se=1) {
g <- rbinom(n, 2, 0.3)
a <- 2 + 0.5*g + rnorm(n)
y <- 4 + 0.5*a + rnorm(n)
num <- lm(y ~ g)$coef["g"]
mod_den <- lm(a ~ g)
den <- mod_den$coef["g"]
den_p <- summary(mod_den)$coef["g",4]
iv <- num/den
return(c(num,den,den_p,iv))
}
gsim <- function(n = 10000,a_sd=1) {
g <- rbinom(n, 2, 0.3)
a <- 2 + 0.5*g + rnorm(n,mean = 0, sd = a_sd)
y <- 4 + 0.5*a + rnorm(n)
num <- lm(y ~ g)$coef["g"]
mod_den <- lm(a ~ g)
den <- mod_den$coef["g"]
den_p <- summary(mod_den)$coef["g",4]
iv <- num/den
return(c(num,den,den_p,iv))
}
out <- replicate(100,gsim(a_sd=10)) %>% t %>% as.data.frame
names(out) <- c("num","den","den_p","iv")
range(out$den_p)
hist(out$den_p)
mean(out$iv)
out <- replicate(100,gsim(a_sd=20)) %>% t %>% as.data.frame
names(out) <- c("num","den","den_p","iv")
range(out$den_p)
hist(out$den_p)
out <- replicate(100,gsim(a_sd=40)) %>% t %>% as.data.frame
names(out) <- c("num","den","den_p","iv")
range(out$den_p)
hist(out$den_p)
out <- replicate(100,gsim(a_sd=60)) %>% t %>% as.data.frame
names(out) <- c("num","den","den_p","iv")
range(out$den_p)
hist(out$den_p)
out <- replicate(100,gsim(a_sd=100)) %>% t %>% as.data.frame
names(out) <- c("num","den","den_p","iv")
range(out$den_p)
hist(out$den_p)
out <- replicate(100,gsim(a_sd=200)) %>% t %>% as.data.frame
names(out) <- c("num","den","den_p","iv")
range(out$den_p)
hist(out$den_p)
out <- replicate(100,gsim(a_sd=500)) %>% t %>% as.data.frame
out <- replicate(100,gsim(a_sd=50)) %>% t %>% as.data.frame
names(out) <- c("num","den","den_p","iv")
range(out$den_p)
hist(out$den_p)
out <- replicate(100,gsim(a_sd=50)) %>% t %>% as.data.frame
names(out) <- c("num","den","den_p","iv")
range(out$den_p)
hist(out$den_p)
mean(out$iv)
out <- replicate(1000,gsim(a_sd=50)) %>% t %>% as.data.frame
names(out) <- c("num","den","den_p","iv")
range(out$den_p)
hist(out$den_p)
mean(out$iv)
mean(out$iv[out$den_p<0.01])
mean(out$iv[out$den_p<0.05])
mean(out$iv[out$den_p<0.15])
out <- replicate(10000,gsim(a_sd=50)) %>% t %>% as.data.frame
names(out) <- c("num","den","den_p","iv")
range(out$den_p)
hist(out$den_p)
mean(out$iv)
mean(out$iv[out$den_p<0.01])
plot(out$num[out$den_p<pt], out$den[out$den_p<pt])
pt <- 0.05
plot(out$num[out$den_p<pt], out$den[out$den_p<pt])
plot(out$den[out$den_p<pt], out$num[out$den_p<pt])
pt <- 1
plot(out$den[out$den_p<pt], out$num[out$den_p<pt])
pt <- 0.01
plot(out$den[out$den_p<pt], out$num[out$den_p<pt])
mean(out$iv[out$den_p<0.001])
mean(out$iv)
mean(out$den[out$den_p<0.01])
mean(out$iv[out$den_p<0.01])
mean(out$iv[out$den_p<0.001])
mean(out$den[out$den_p<1])
mean(out$den[out$den_p<0.01])
datasim <- function(n = 1000, rr = NULL, or = NULL, c_param = 1.1, baseline = 0.1, R = 1000, intx = 1) {
c <- rbinom(n = n, size = 1, prob = 0.5)
a <- rbinom(n = n, size = 1, prob = 0.2 + 0.2*c)
if (is.null(rr)) {
# Parameters on the logit-scale
y <- rbinom(n = n, size = 1,
prob = inv.logit(log(baseline/(1-baseline)) + log(or)*a + log(c_param)*c + log(intx)*a*c))
} else {
# Parameters on the log-scale
y <- rbinom(n = n, size = 1,
prob = exp(log(baseline) + log(rr)*a + log(c_param)*c + log(intx)*a*c))
}
data <- data.frame(c,a,y)
return(data)
}
modLR_boot <- function(formula,data,indices) {
library(magrittr)
library(dplyr)
data <- data[d, ]
data_mod <- data %>% mutate(y = 0) %>%
rbind(data[data$y==1,])
glm(formula, data = data_mod, family=binomial)$coef %>% unname %>% return()
}
modLR <- function(data, R = 1000) {
library(boot)
library(parallel)
library(magrittr)
out <- boot(data, modLR_boot, R = R, parallel = "snow", ncpus = 3)
out <- c(out$t %>%
quantile(., c(0.5, 0.025, 0.975)) %>%
exp,sd(out$t)) %>% round(4) %>% unname
return(out)
}
max_RR <- function(baseline_risk, RRc) {
exp(log(1) - log(baseline_risk) - log(RRc))
}
MH_RR <- function(data) {
library(meta)
tab <- table(a = data$a, y = data$y, c = data$c)
ai <- tab[2,2,]
bi <- tab[2,1,]
ci <- tab[1,2,]
di <- tab[1,1,]
mh <- metabin(event.e = tab[2,2,], n.e = tab[2,2,] + tab[2,1,],
event.c = tab[1,2,], n.c = tab[1,2,] + tab[1,1,],
method = "MH")
mh_est <- c(mh$TE.fixed,mh$lower.fixed,mh$upper.fixed) %>% exp %>% c(.,mh$seTE.fixed) %>% unname
return(mh_est)
}
logbin <- function(data) {
log_bin_est <- tryCatch({
mod <- glm(y ~ a + c, data = data, family=binomial(link="log"))
est <- mod$coef["a"]
se <-  summary(mod)$coefficients["a","Std. Error"]
c(exp(est + 1.96*c(0,-1,1)*se),se) %>% round(4) %>% unname
},
error = function(cond) {
rep(NA,4)
})
return(log_bin_est)
}
comp <- function(n = 1000, rr = NULL, or = NULL, c_param = 1.1, baseline = 0.1, R = 1000) {
ds <- datasim(n = n, rr = rr, or = or, c_param = c_param, baseline = baseline, R = R)
mod <- modLR(ds)
logbin <- logbin(ds)
mh <- MH_RR(ds)
out <- c(rr,mod,logbin,mh)
return(out)
}
data <- datasim()
datasim <- function(n = 1000, rr = NULL, or = NULL, c_param = 1.1, baseline = 0.1, R = 1000, intx = 1) {
library(boot)
c <- rbinom(n = n, size = 1, prob = 0.5)
a <- rbinom(n = n, size = 1, prob = 0.2 + 0.2*c)
if (is.null(rr)) {
# Parameters on the logit-scale
y <- rbinom(n = n, size = 1,
prob = inv.logit(log(baseline/(1-baseline)) + log(or)*a + log(c_param)*c + log(intx)*a*c))
} else {
# Parameters on the log-scale
y <- rbinom(n = n, size = 1,
prob = exp(log(baseline) + log(rr)*a + log(c_param)*c + log(intx)*a*c))
}
data <- data.frame(c,a,y)
return(data)
}
data <- datasim()
data <- datasim(rr=1.2)
formula <- y ~ a + c
library(lmtest)
library(sandwich)
# Make outcome variable 'y'
data$y <- data[,all.vars(formula)[1]]
# Assign an 'id' to every observation for clustering
data$id <- 1:nrow(data)
# Data modification
data_modified <- rbind(data, transform(data[data$y==1, ], y = 0 ))
data_modified[,all.vars(formula)[1]] <- data_modified$y
# Run LR on expanded dataset
model <- glm(formula = formula,
data = data_modified,
family = binomial)
# Use coeftest to get clustered SEs, then clean up the mess that coeftest makes
out_coeftest <- coeftest(model,vcov=vcovCL(model, cluster=data_modified$id))
out <- list()
for(c in 1:dim(out_coeftest)[2]) out[[c]]=out_coeftest[,c]   # writes column values of x to list
out <- as.data.frame(out)                  # converts list to data frame object
names(out) <- c("est","se","z","p")
# Predicted probabilities
predict(model, newdata = data, type = "response")
# Predicted probabilities
predict(model, newdata = data, type = "response") %>% range
data <- datasim(or=2,baseline = 0.9 )
# Make outcome variable 'y'
data$y <- data[,all.vars(formula)[1]]
# Assign an 'id' to every observation for clustering
data$id <- 1:nrow(data)
# Data modification
data_modified <- rbind(data, transform(data[data$y==1, ], y = 0 ))
data_modified[,all.vars(formula)[1]] <- data_modified$y
# Run LR on expanded dataset
model <- glm(formula = formula,
data = data_modified,
family = binomial)
# Use coeftest to get clustered SEs, then clean up the mess that coeftest makes
out_coeftest <- coeftest(model,vcov=vcovCL(model, cluster=data_modified$id))
out <- list()
for(c in 1:dim(out_coeftest)[2]) out[[c]]=out_coeftest[,c]   # writes column values of x to list
out <- as.data.frame(out)                  # converts list to data frame object
names(out) <- c("est","se","z","p")
# Calculate CIs and rename variables
out$lowCI <- out$est - qnorm(0.975)*out$se
out$highCI <- out$est + qnorm(0.975)*out$se
out <- out[,c("est","lowCI","highCI","se","p")]
# Predicted probabilities
predict(model, newdata = data, type = "response") %>% range
summary(model)
exp(-0.09)
data[,terms(formula)]
terms(formula)
terms(formula) %>% names
terms(formula) %>% attr("term.labels")
data[,terms(formula) %>% attr("term.labels")]
# Predicted probabilities
exp(model$coef)
model$R
model$linear.predictors
model$linear.predictors %>% exp()
model$linear.predictors %>% exp() %>% range()
# Predicted probabilities
pp <- model$linear.predictors[1:nrow(data)] %>% exp()
plot(pp)
hist(pp)
#' Expanded logistic regression
#'
#'  Estimates risk ratios using logistic regression with a simple data transformation.
#'
#' @param formula regression formula
#' @param data Data set for analysis
#'
#' @return Returns a list of log scale coefficients and RR scale coefficients
expandedLR <- function(formula, data, id = NULL) {
library(lmtest)
library(sandwich)
# Make outcome variable 'y'
data$y <- data[,all.vars(formula)[1]]
# Assign an 'id' to every observation for clustering
if (is.null(id)) {
data$id <- 1:nrow(data)
} else {
data$id <- data[,id]
}
# Data modification
data_modified <- rbind(data, transform(data[data$y==1, ], y = 0 ))
data_modified[,all.vars(formula)[1]] <- data_modified$y
# Run LR on expanded dataset
model <- glm(formula = formula,
data = data_modified,
family = binomial)
# Use coeftest to get clustered SEs, then clean up the mess that coeftest makes
out_coeftest <- coeftest(model,vcov=vcovCL(model, cluster=data_modified$id))
out <- list()
for(c in 1:dim(out_coeftest)[2]) out[[c]]=out_coeftest[,c]   # writes column values of x to list
out <- as.data.frame(out)                  # converts list to data frame object
names(out) <- c("est","se","z","p")
# Calculate CIs and rename variables
out$lowCI <- out$est - qnorm(0.975)*out$se
out$highCI <- out$est + qnorm(0.975)*out$se
out <- out[,c("est","lowCI","highCI","se","p")]
# Predicted probabilities
data$pp <- model$linear.predictors[1:nrow(data)] %>% exp()
# Also offer exponentiated coefficients
out_RR <- out[,c("est","lowCI","highCI")] %>% exp
return(list(coefficients = out,
RR_scale = out_RR,
data = data))
}
expandedLR(y ~ a + c, data= data)
data("Titanic")
head(Titanic)
data("esoph")
head(esoph)
class(Titanic)
install.packages("NHANES")
library(NHANES)
data("NHANES")
head(ds)
ds <- NHANES
head(ds)
ds$obese <- ds$BMI>=30
formula <- obese ~ Education + age
#' Expanded logistic regression
#'
#'  Estimates risk ratios using logistic regression with a simple data transformation.
#'
#' @param formula regression formula
#' @param data Data set for analysis
#'
#' @return Returns a list of log scale coefficients and RR scale coefficients
expandedLR <- function(formula, data, id = NULL) {
library(lmtest)
library(sandwich)
# Make outcome variable 'y'
data$y <- data[,all.vars(formula)[1]]
# Assign an 'id' to every observation for clustering
if (is.null(id)) {
data$id <- 1:nrow(data)
} else {
data$id <- data[,id]
}
# Data modification
data_modified <- rbind(data, transform(data[data$y==1, ], y = 0 ))
data_modified[,all.vars(formula)[1]] <- data_modified$y
# Run LR on expanded dataset
model <- glm(formula = formula,
data = data_modified,
family = binomial)
# Use coeftest to get clustered SEs, then clean up the mess that coeftest makes
out_coeftest <- coeftest(model,vcov=vcovCL(model, cluster=data_modified$id))
out <- list()
for(c in 1:dim(out_coeftest)[2]) out[[c]]=out_coeftest[,c]   # writes column values of x to list
out <- as.data.frame(out)                  # converts list to data frame object
names(out) <- c("est","se","z","p")
# Calculate CIs and rename variables
out$lowCI <- out$est - qnorm(0.975)*out$se
out$highCI <- out$est + qnorm(0.975)*out$se
out <- out[,c("est","lowCI","highCI","se","p")]
# Predicted probabilities
data$pp <- model$linear.predictors[1:nrow(data)] %>% exp()
# Also offer exponentiated coefficients
out_RR <- out[,c("est","lowCI","highCI")] %>% exp
return(list(coefficients = out,
RR_scale = out_RR,
data = data))
}
expandedLR(formula, data=ds)
formula <- obese ~ Education + Age
expandedLR(formula, data=ds)
out <- xpandedLR(formula, data=ds)
out <- expandedLR(formula, data=ds)
range(out$data$pp)
range(out$data$pp, na.rm = T)
ds$obese <- ds$BMI>=22
formula <- obese ~ Education + Age
out <- expandedLR(formula, data=ds)
range(out$data$pp, na.rm = T)
range(ds$BMI)
range(ds$BMI, na.rm = T)
ds$obese <- ds$BMI>=19
formula <- obese ~ Education + Age
out <- expandedLR(formula, data=ds)
range(out$data$pp, na.rm = T)
ds$obese <- ds$BMI>=16
formula <- obese ~ Education + Age
out <- expandedLR(formula, data=ds)
range(out$data$pp, na.rm = T)
ds$obese <- ds$BMI>=30
formula <- obese ~ Education + Age
out <- expandedLR(formula, data=ds)
range(out$data$pp, na.rm = T)
formula <- obese ~ Education + Age + SmokeNow
out <- expandedLR(formula, data=ds)
range(out$data$pp, na.rm = T)
out$RR_scale
out$RR_scale %>% round(2)
names(ds)
formula <- obese ~ Education + Age*Gender + SmokeNow + Work + Pulse
out <- expandedLR(formula, data=ds)
range(out$data$pp, na.rm = T)
out$RR_scale %>% round(2)
ds$obese <- ds$BMI>=20
formula <- obese ~ Education + Age*Gender + SmokeNow + Work + Pulse
out <- expandedLR(formula, data=ds)
range(out$data$pp, na.rm = T)
out$RR_scale %>% round(2)
hist(out$pp)
hist(out$data$pp)
#' Expanded logistic regression
#'
#'  Estimates risk ratios using logistic regression with a simple data transformation.
#'
#' @param formula regression formula
#' @param data Data set for analysis
#'
#' @return Returns a list of log scale coefficients and RR scale coefficients
expandedLR <- function(formula, data, id = NULL) {
library(lmtest)
library(sandwich)
# Make outcome variable 'y'
data$y <- data[,all.vars(formula)[1]]
# Assign an 'id' to every observation for clustering
if (is.null(id)) {
data$id <- 1:nrow(data)
} else {
data$id <- data[,id]
}
# Data modification
data_modified <- rbind(data, transform(data[data$y==1, ], y = 0 ))
data_modified[,all.vars(formula)[1]] <- data_modified$y
# Run LR on expanded dataset
model <- glm(formula = formula,
data = data_modified,
family = binomial)
# Use coeftest to get clustered SEs, then clean up the mess that coeftest makes
out_coeftest <- coeftest(model,vcov=vcovCL(model, cluster=data_modified$id))
out <- list()
for(c in 1:dim(out_coeftest)[2]) out[[c]]=out_coeftest[,c]   # writes column values of x to list
out <- as.data.frame(out)                  # converts list to data frame object
names(out) <- c("est","se","z","p")
# Calculate CIs and rename variables
out$lowCI <- out$est - qnorm(0.975)*out$se
out$highCI <- out$est + qnorm(0.975)*out$se
out <- out[,c("est","lowCI","highCI","se","p")]
# Predicted probabilities
data$pp <- model$linear.predictors[1:nrow(data)] %>% exp()
if (any(data$pp>=1,na.rm=T)) warning("PREDICTED PROBABILITIES >= 1")
# Also offer exponentiated coefficients
out_RR <- out[,c("est","lowCI","highCI")] %>% exp
return(list(coefficients = out,
RR_scale = out_RR,
data = data))
}
out <- expandedLR(formula, data=ds)
any(data$pp>=1,na.rm=T)
data <- ds
# Make outcome variable 'y'
data$y <- data[,all.vars(formula)[1]]
formula
# Make outcome variable 'y'
data$y <- data[,all.vars(formula)[1]]
# Assign an 'id' to every observation for clustering
if (is.null(id)) {
data$id <- 1:nrow(data)
} else {
data$id <- data[,id]
}
# Data modification
data_modified <- rbind(data, transform(data[data$y==1, ], y = 0 ))
id <- NULL
# Assign an 'id' to every observation for clustering
if (is.null(id)) {
data$id <- 1:nrow(data)
} else {
data$id <- data[,id]
}
# Data modification
data_modified <- rbind(data, transform(data[data$y==1, ], y = 0 ))
data_modified[,all.vars(formula)[1]] <- data_modified$y
# Run LR on expanded dataset
model <- glm(formula = formula,
data = data_modified,
family = binomial)
# Use coeftest to get clustered SEs, then clean up the mess that coeftest makes
out_coeftest <- coeftest(model,vcov=vcovCL(model, cluster=data_modified$id))
out <- list()
for(c in 1:dim(out_coeftest)[2]) out[[c]]=out_coeftest[,c]   # writes column values of x to list
out <- as.data.frame(out)                  # converts list to data frame object
names(out) <- c("est","se","z","p")
# Calculate CIs and rename variables
out$lowCI <- out$est - qnorm(0.975)*out$se
out$highCI <- out$est + qnorm(0.975)*out$se
out <- out[,c("est","lowCI","highCI","se","p")]
# Predicted probabilities
data$pp <- model$linear.predictors[1:nrow(data)] %>% exp()
if (any(data$pp>=1,na.rm=T)) warning("PREDICTED PROBABILITIES >= 1")
data$pp
data$pp>=1
any(data$pp>=1,na.rm=T)
